.TH "EntityManager" 3 "Fri Jul 24 2015" "Fortress" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EntityManager \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <entity_manager\&.h>\fP
.PP
Inherits \fBEntityManagerInterface\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialise\fP (\fBGameEngineInterface\fP *engine)"
.br
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.ti -1c
.RI "\fBEntity\fP * \fBcreateEntity\fP (const std::string &name)"
.br
.ti -1c
.RI "void \fBdestroyEntity\fP (\fBEntityId\fP)"
.br
.ti -1c
.RI "\fBEntity\fP * \fBgetPlayer\fP ()"
.br
.ti -1c
.RI "\fBEntity\fP * \fBcreateWallPrefab\fP (unsigned int x, unsigned int y)"
.br
.ti -1c
.RI "\fBEntity\fP * \fBcreatePlayerPrefab\fP (unsigned int x, unsigned int y)"
.br
.ti -1c
.RI "\fBEntity\fP * \fBcreateEnemyPrefab\fP (unsigned int x, unsigned int y)"
.br
.ti -1c
.RI "\fBEntity\fP * \fBcreateTilePrefab\fP (unsigned int x, unsigned int y)"
.br
.ti -1c
.RI "\fBComponentManagerInterface\fP
.br
< \fBSpriteComponent\fP > * \fBgetSprites\fP ()"
.br
.ti -1c
.RI "\fBComponentManagerInterface\fP
.br
< \fBColliderComponent\fP > * \fBgetColliders\fP ()"
.br
.ti -1c
.RI "\fBEntity\fP * \fBgetEntity\fP (\fBEntityId\fP id)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBGameEngineInterface\fP * \fBm_engine\fP"
.br
.ti -1c
.RI "unsigned long \fBmaxId\fP"
.br
.ti -1c
.RI "\fBEntity\fP * \fBm_player\fP"
.br
.ti -1c
.RI "std::map< \fBEntityId\fP, \fBEntity\fP * > \fBm_idMap\fP"
.br
.ti -1c
.RI "std::map< std::string, \fBEntity\fP * > \fBm_nameMap\fP"
.br
.ti -1c
.RI "\fBComponentManager\fP< \fBSpriteComponent\fP > \fBm_sprites\fP"
.br
.ti -1c
.RI "\fBComponentManager\fP
.br
< \fBColliderComponent\fP > \fBm_colliders\fP"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "\fBEntity\fP * EntityManager::createEnemyPrefab (unsigned intx, unsigned inty)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBEntity\fP * EntityManager::createEntity (const std::string &name)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBEntity\fP * EntityManager::createPlayerPrefab (unsigned intx, unsigned inty)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBEntity\fP * EntityManager::createTilePrefab (unsigned intx, unsigned inty)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBEntity\fP * EntityManager::createWallPrefab (unsigned intx, unsigned inty)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "void EntityManager::destroy ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "void EntityManager::destroyEntity (\fBEntityId\fPid)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBComponentManagerInterface\fP<\fBColliderComponent\fP>* EntityManager::getColliders ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBEntity\fP * EntityManager::getEntity (\fBEntityId\fPid)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBEntity\fP * EntityManager::getPlayer ()\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "\fBComponentManagerInterface\fP<\fBSpriteComponent\fP>* EntityManager::getSprites ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SS "void EntityManager::initialise (\fBGameEngineInterface\fP *engine)\fC [virtual]\fP"

.PP
Implements \fBEntityManagerInterface\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBComponentManager\fP<\fBColliderComponent\fP> EntityManager::m_colliders\fC [private]\fP"

.SS "\fBGameEngineInterface\fP* EntityManager::m_engine\fC [private]\fP"

.SS "std::map<\fBEntityId\fP, \fBEntity\fP*> EntityManager::m_idMap\fC [private]\fP"

.SS "std::map<std::string, \fBEntity\fP*> EntityManager::m_nameMap\fC [private]\fP"

.SS "\fBEntity\fP* EntityManager::m_player\fC [private]\fP"

.SS "\fBComponentManager\fP<\fBSpriteComponent\fP> EntityManager::m_sprites\fC [private]\fP"

.SS "unsigned long EntityManager::maxId\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Fortress from the source code\&.
