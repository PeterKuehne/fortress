.TH "GameEngine" 3 "Fri Jul 24 2015" "Fortress" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GameEngine \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gameengine\&.h>\fP
.PP
Inherits \fBGameEngineInterface\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGameEngine\fP (\fBGraphicsInterface\fP *a_graphics)"
.br
.ti -1c
.RI "\fB~GameEngine\fP ()"
.br
.ti -1c
.RI "void \fBinitialise\fP (void)"
.br
.ti -1c
.RI "void \fBtick\fP (void)"
.br
.ti -1c
.RI "void \fBquit\fP ()"
.br
.ti -1c
.RI "bool \fBisPlayerTurn\fP ()"
.br
.ti -1c
.RI "void \fBswapTurn\fP ()"
.br
.ti -1c
.RI "void \fBraiseEvent\fP (\fBEvent\fP *event)"
.br
.ti -1c
.RI "\fBEntityManagerInterface\fP * \fBgetEntities\fP ()"
.br
.ti -1c
.RI "void \fBloadMap\fP (const std::string &mapName)"
.br
.ti -1c
.RI "unsigned long long \fBgetTick\fP ()"
.br
.ti -1c
.RI "\fBWindowManagerInterface\fP * \fBgetWindows\fP ()"
.br
.ti -1c
.RI "\fBGraphicsInterface\fP * \fBgetGraphics\fP ()"
.br
.ti -1c
.RI "void \fBsetEntityManager\fP (\fBEntityManagerInterface\fP *a_manager)"
.br
.ti -1c
.RI "void \fBsetWindowManager\fP (\fBWindowManagerInterface\fP *a_manager)"
.br
.ti -1c
.RI "void \fBsetEventManager\fP (\fBEventManagerInterface\fP *a_manager)"
.br
.ti -1c
.RI "void \fBaddSystem\fP (\fBGameSystemInterface\fP *a_system)"
.br
.ti -1c
.RI "void \fBsetGenerator\fP (\fBGeneratorInterface\fP *a_generator)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long long \fBm_tick\fP"
.br
.ti -1c
.RI "bool \fBm_playerTurn\fP"
.br
.ti -1c
.RI "\fBEntityManagerInterface\fP * \fBm_entityManager\fP"
.br
.ti -1c
.RI "\fBEventManagerInterface\fP * \fBm_eventManager\fP"
.br
.ti -1c
.RI "\fBWindowManagerInterface\fP * \fBm_windowManager\fP"
.br
.ti -1c
.RI "std::vector
.br
< \fBGameSystemInterface\fP * > \fBm_systems\fP"
.br
.ti -1c
.RI "\fBGraphicsInterface\fP * \fBm_graphics\fP"
.br
.ti -1c
.RI "\fBGeneratorInterface\fP * \fBm_generator\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GameEngine::GameEngine (\fBGraphicsInterface\fP *a_graphics)"

.SS "GameEngine::~GameEngine ()"

.SH "Member Function Documentation"
.PP 
.SS "void GameEngine::addSystem (\fBGameSystemInterface\fP *a_system)\fC [inline]\fP"

.SS "\fBEntityManagerInterface\fP* GameEngine::getEntities ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "\fBGraphicsInterface\fP* GameEngine::getGraphics ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "unsigned long long GameEngine::getTick ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "\fBWindowManagerInterface\fP* GameEngine::getWindows ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "void GameEngine::initialise (void)\fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "bool GameEngine::isPlayerTurn ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "void GameEngine::loadMap (const std::string &mapName)\fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "void GameEngine::quit ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "void GameEngine::raiseEvent (\fBEvent\fP *event)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "void GameEngine::setEntityManager (\fBEntityManagerInterface\fP *a_manager)\fC [inline]\fP"

.SS "void GameEngine::setEventManager (\fBEventManagerInterface\fP *a_manager)\fC [inline]\fP"

.SS "void GameEngine::setGenerator (\fBGeneratorInterface\fP *a_generator)\fC [inline]\fP"

.SS "void GameEngine::setWindowManager (\fBWindowManagerInterface\fP *a_manager)\fC [inline]\fP"

.SS "void GameEngine::swapTurn ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SS "void GameEngine::tick (void)\fC [virtual]\fP"

.PP
Implements \fBGameEngineInterface\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBEntityManagerInterface\fP* GameEngine::m_entityManager\fC [private]\fP"

.SS "\fBEventManagerInterface\fP* GameEngine::m_eventManager\fC [private]\fP"

.SS "\fBGeneratorInterface\fP* GameEngine::m_generator\fC [private]\fP"

.SS "\fBGraphicsInterface\fP* GameEngine::m_graphics\fC [private]\fP"

.SS "bool GameEngine::m_playerTurn\fC [private]\fP"

.SS "std::vector<\fBGameSystemInterface\fP*> GameEngine::m_systems\fC [private]\fP"

.SS "unsigned long long GameEngine::m_tick\fC [private]\fP"

.SS "\fBWindowManagerInterface\fP* GameEngine::m_windowManager\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Fortress from the source code\&.
